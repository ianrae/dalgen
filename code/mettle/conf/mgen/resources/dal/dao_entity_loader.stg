header(package, extras) ::= <<
//THIS FILE HAS BEEN AUTO-GENERATED. DO NOT MODIFY.

package <package>;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.fasterxml.jackson.databind.JsonNode;
import mef.entities.*;
import mef.gen.*;

import java.util.Date;
import org.mef.framework.loaders.BaseDaoJsonLoader;
<extras; separator="\n">




>>

readentity(type, fields) ::= <<
	public <type> read<type>(JsonNode node)
	{
		<type> obj = new <type>();
		JsonNode jj = node.get("id");
		obj.setId(jj.asLong());

		<fields:{t| 
		jj = node.get("<t.name>");
		<if(t.stringType)>
		obj.set<t.uname>(jj.textValue());
		<endif>
		<if(t.booleanType)>
		obj.set<t.uname>(jj.asBoolean());
		<endif>
		<if(t.dateType)>
		obj.set<t.uname>(readDate(jj, "yyyy-MM-dd"));
		<endif>
		}; separator="\n">

		
		return obj;
	}

>>
	
loadentity(type) ::= <<
	public List\<<type>\> load<type>s(JsonNode rootNode) 
	{
		List\<<type>\> phoneL = new ArrayList\<<type>\>();
		
    	JsonNode msgNode = rootNode.path("<type>");
		Iterator\<JsonNode> ite = msgNode.elements();

		int i = 0;
		while (ite.hasNext()) {
			JsonNode temp = ite.next();
			<type> ph = read<type>(temp);
			
			phoneL.add(ph);
			i++;
		}    	
		
		return phoneL;
	}

>>

findwithidentity(type) ::= <<
	protected <type> find<type>WithId(long id, List\<<type>\> phoneL) 
	{
		for (<type> ph : phoneL)
		{
			if (ph.getId() == id)
			{
				return ph;
			}
		}
		return null;
	}

>>
	
resolve2(type1, type2) ::= <<
	public void resolveIds(List\<<type1>\> userL, List\<<type2>\> phoneL) 
	{
		for(<type1> u : userL)
		{
			<type2> ph = find<type2>WithId(u.phone.id, phoneL);
			if (ph == null)
			{
				//err!!
			}
			else
			{
				u.phone = ph;
			}
		}
	}

>>

classdecl(name, isParentOfExtended) ::= <<
<if(isParentOfExtended)>

public class <name> extends <name>_GEN
{

<else>
public class <name> extends BaseDaoJsonLoader
{

	
<endif>

>>

endclassdecl() ::= <<
}
>>

