header(package, extras, willBeOverwritten) ::= <<

<if(willBeOverwritten)>
//THIS FILE HAS BEEN AUTO-GENERATED. DO NOT MODIFY.
<endif>

package <package>;

import java.util.List;
import java.util.ArrayList;
import mef.entities.*;
import mef.daos.*;
import org.mef.twixt.binder.IFormBinder;
import com.fasterxml.jackson.databind.ObjectMapper;
import mef.gen.*;
import org.mef.framework.entitydb.EntityDB;
import java.util.Date;
import com.avaje.ebean.Page;
import org.mef.framework.fluent.EntityDBQueryProcessor;
import org.mef.framework.fluent.ProcRegistry;
import org.mef.framework.fluent.QStep;
import org.mef.framework.fluent.Query1;
import org.mef.framework.fluent.QueryContext;
import org.mef.framework.sfx.SfxContext;


<extras; separator="\n">

>>



querydecl(type, fieldType, name, eq) ::= <<
//query
    @Override
    public <type> find_by_<name>(<fieldType> val) 
    {
		<type> user = _entityDB.findFirstMatch(_L, "<name>", val);
		return user;
    }
>>

methoddecl(meth, retVal) ::= <<
//method
public <meth>
{
	return <retVal>;
}
>>

queryonetomany(type, fieldType, fullName) ::= <<
	public List\<<fieldType>\> <fullName>(<type> entity)
	{
	  return null;
	}
>>

classdecl(name, type, isParentOfExtended) ::= <<
<if(isParentOfExtended)>
public class <name> extends <name>_GEN
{


<else>
public class <name> implements I<type>DAO
{
    protected List\<<type>\> _L = new ArrayList\<<type>\>();
    protected EntityDB\<<type>\> _entityDB = new EntityDB\<<type>\>();
	public QueryContext\<<type>\> queryctx; 
	
	@Override
	public void init(SfxContext ctx)
	{
		this.queryctx = new QueryContext\<<type>\>(ctx, <type>.class);
		
		ProcRegistry registry = (ProcRegistry) ctx.getServiceLocator().getInstance(ProcRegistry.class);
		EntityDBQueryProcessor\<<type>\> proc = new EntityDBQueryProcessor\<<type>\>(ctx, _L);
		registry.registerDao(<type>.class, proc);
	}
    
	@Override
	public Query1\<<type>\> query() 
	{
		queryctx.queryL = new ArrayList\<QStep>();
		return new Query1\<<type>\>(queryctx);
	}
    
    
    @Override
    public int size() 
    {
        return _L.size();
    }

    @Override
    public <type> findById(long id) 
    {
    	<type> entity = this.findActualById(id);
    	if (entity != null)
    	{
    		return new <type>(entity); //return copy
        }
        return null; //not found
    }

    protected <type> findActualById(long id) 
    {
        for(<type> entity : _L)
        {
            if (entity.getId() == id)
            {
                return entity;
            }
        }
        return null; //not found
    }

    @Override
    public List\<<type>\> all() 
    {
        return _L; //ret copy??!!
    }

    @Override
    public void delete(long id) 
    {
        <type> entity = this.findActualById(id);
        if (entity != null)
        {
            _L.remove(entity);
        }
    }

    @Override
    public void save(<type> entity) 
    {
    	if (entity.getId() == null)
		{
    		entity.setId(new Long(0L));
    	}
		
    	if (findActualById(entity.getId()) != null)
    	{
    		throw new RuntimeException(String.format("save: id %d already exists", entity.getId()));
    	}

		
        if (entity.getId() == 0)
        {
        	entity.setId(nextAvailIdNumber());
        }
		else
		{
			delete(entity.getId()); //remove existing
		}
        
         _L.add(entity);
     }
 
    private Long nextAvailIdNumber() 
    {
    	long used = 0;
        for(<type> entity : _L)
        {
            if (entity.getId() > used)
            {
                used = entity.getId();
            }
        }
        return used + 1;
	}

	@Override
	public void update(<type> entity) 
	{
		this.delete(entity.getId());
		this.save(entity);
	}


<endif>	
	
>>

endclassdecl() ::= <<
}
>>

sampleloop(items) ::= "<items:{it|<it.id>: <it.lastName>, <it.firstName>\n}>"