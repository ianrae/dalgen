header(package, type, extras) ::= <<

//THIS FILE HAS BEEN AUTO-GENERATED. DO NOT MODIFY.
package <package>;


import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.mef.framework.binder.IFormBinder;

import com.avaje.ebean.Ebean;
import com.avaje.ebean.Query;

import play.Logger;
import java.util.Date;

import boundaries.Boundary;
import boundaries.daos.*;
import mef.core.MettleInitializer;

import models.<type>Model;
import play.db.ebean.Model.Finder;
import mef.gen.*;

import mef.daos.*;
import mef.entities.*;
import com.avaje.ebean.Page;
import org.mef.framework.fluent.EntityDBQueryProcessor;
import org.mef.framework.fluent.ProcRegistry;
import org.mef.framework.fluent.QStep;
import org.mef.framework.fluent.Query1;
import org.mef.framework.fluent.QueryContext;
import org.mef.framework.sfx.SfxContext;


<extras; separator="\n">

>>



querydecl(type, fieldType, name) ::= <<
    @Override
    public <type> find_by_<name>(<fieldType> val) 
    {
      <type>Model model = <type>Model.find.where().eq("<name>", val).findUnique();
	  if (model == null)
	  {
		return null;
	  }
	  <type> entity = createEntityFromModel(model);
	  return entity;
    }
>>

methoddecl(meth) ::= <<
public <meth>
{
	return null;
}
>>


classdecl(name, type, isParentOfExtended) ::= <<
<if(isParentOfExtended)>

public class <name> extends <name>_GEN
{


<else>
public class <name> implements I<type>DAO 
{
	public QueryContext\<<type>\> queryctx; 
	
	@Override
	public void init(SfxContext ctx)
	{
		this.queryctx = new QueryContext\<<type>\>(ctx, <type>.class);
		
		ProcRegistry registry = (ProcRegistry) ctx.getServiceLocator().getInstance(ProcRegistry.class);
		<type>EbeanQueryProcessor proc = new <type>EbeanQueryProcessor(ctx);
		registry.registerDao(<type>.class, proc);

	}
    
	@Override
	public Query1\<<type>\> query() 
	{
		queryctx.queryL = new ArrayList\<QStep>();
		return new Query1\<<type>\>(queryctx);
	}

	@Override
	public void save(<type> entity) 
	{
		<type>Model t = (<type>Model)entity.getUnderlyingModel();
		t.save();
	}
	

	@Override
	public <type> findById(long id) 
	{
		<type>Model t = (<type>Model)<type>Model.find.byId(id);
		if (t == null)
		{
			return null;
		}
				
		t.entity = new <type>(t); //create entity, set m.cc and t.entity, copy all fields from model to entity
		return t.entity;
	}

	@Override
	public List\<<type>\> all() 
	{
		List\<<type>Model> L = <type>Model.all();
		List\<<type>\> entityL = createEntityFromModel(L);
		return entityL;
	}

	@Override
	public int size() 
	{
		return <type>Model.all().size();
	}

	@Override
	public void delete(long id) 
	{
		<type>Model t = <type>Model.find.byId(id);
		t.delete();
	}

	//<type>
	//create model, set entity, and call all setters
	public static <type>Model createModelFromEntity(<type> entity)
	{
		if (entity == null)
		{
			return null;
		}
		<type>Model t = (<type>Model)entity.getUnderlyingModel();
		return t;
	}
	//create entity, set m.cc and t.entity, copy all fields from model to entity
	public static <type> createEntityFromModel(<type>Model t)
	{
		if (t == null)
		{
			return null;		
		}
		
		<type> entity = new <type>(t);
		return entity;
	}
	public static List\<<type>\> createEntityFromModel(List\<<type>Model> L)
	{
		ArrayList\<<type>\> entityL = new ArrayList\<<type>\>();
		for(<type>Model t : L)
		{
			<type> entity = createEntityFromModel(t);
			if (entity != null) //why??!!
			{
				entityL.add(entity);
			}
		}
		return entityL;
	}


	@Override
	public void updateFrom(IFormBinder binder) 
	{
		<type>Model model = (<type>Model) binder.getRawObject();
		model.update();
	}
    @Override
    public void updateFrom(IFormBinder binder, <type> entity) 
    {
		throw new RuntimeException("you must implement updateFrom!"); //since some entities don't have id
    }


	@Override
	public void update(<type> entity) 
	{
		<type>Model t = (<type>Model)entity.getUnderlyingModel(); 
		t.update();
	}
<endif>	
       
>>

endclassdecl() ::= <<
}
>>

sampleloop(items) ::= "<items:{it|<it.id>: <it.lastName>, <it.firstName>\n}>"