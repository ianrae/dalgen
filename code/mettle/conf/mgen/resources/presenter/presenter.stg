header(package, type, extras, willBeOverwritten) ::= <<


package <package>;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.mef.framework.Logger;
import org.mef.twixt.binder.IFormBinder;
import org.mef.framework.commands.CreateCommand;
import org.mef.framework.commands.DeleteCommand;
import org.mef.framework.commands.EditCommand;
import org.mef.framework.commands.IndexCommand;
import org.mef.framework.commands.Command;
import org.mef.framework.commands.NewCommand;
import org.mef.framework.commands.ShowCommand;
import org.mef.framework.commands.UpdateCommand;
import org.mef.framework.presenters.Presenter;
import org.mef.framework.replies.Reply;
import org.mef.framework.sfx.SfxBaseObj;
import org.mef.framework.sfx.SfxContext;

import mef.daos.I<type>DAO;
import mef.entities.<type>;
import mef.presenters.replies.<type>Reply;

>>

fielddecl(type, name, value) ::= <<
    public <name> <name><init(value)>;
>>
init(v) ::= "<if(v)> = <v><endif>"


classdecl(type, name) ::= <<

public class <name> extends Presenter
{
	private I<type>DAO _dao;
	private <type>Reply _reply;

	public <name>(SfxContext ctx)
	{
		super(ctx); 
		_dao = (I<type>DAO) getInstance(I<type>DAO.class);
	}
	@Override
	protected <type>Reply createReply()
	{
		_reply = new <type>Reply();
		return _reply;
	}
	
	public <type>Reply onIndexCommand(IndexCommand cmd)
	{
		<type>Reply reply = createReply(); 
		reply.setDestination(Reply.VIEW_INDEX);
		reply._allL = _dao.all();
		return reply;
	}

	public <type>Reply onNewCommand(NewCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.VIEW_NEW);
		reply._entity = new <type>();
		return reply; 
	}
	
	public <type>Reply onCreateCommand(CreateCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.VIEW_NEW);
		
		IFormBinder binder = cmd.getFormBinder();
		if (! binder.bind())
		{
			reply.setFlashFail("binding failed!");
			reply._entity = (<type>) binder.getEntity();
			return reply;
		}
		else
		{
			<type> entity = (<type>) binder.getEntity();
			if (entity == null)
			{
				reply.setFailed(true);
			}
			else
			{
				_dao.save(entity);
				Logger.info("saved new");
				reply.setFlashSuccess("created entity");
				reply.setDestination(Reply.FORWARD_INDEX);
			}
			return reply;
		}
	}
	
	public <type>Reply onEditCommand(EditCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.VIEW_EDIT);
		
		<type> entity = _dao.findById(cmd.id);
		if (entity == null)
		{
			reply.setDestination(Reply.FORWARD_NOT_FOUND);
			return reply;
		}
		else
		{
			reply._entity = entity;
			return reply;
		}
	}
	public <type>Reply onUpdateCommand(UpdateCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.VIEW_EDIT);
		IFormBinder binder = cmd.getFormBinder();
		if (! binder.bind())
		{
			reply.setFlashFail("binding failed!");
			reply._entity = (<type>) binder.getEntity();
			if (reply._entity == null)
			{
				Logger.info("failbinding null entity!");
				reply._entity = _dao.findById(cmd.id); //fix better later!!
			}
			return reply;
		}
		else
		{
			//ensure id is a valid id
			<type> entity = _dao.findById(cmd.id);
			if (entity == null)
			{
				reply.setDestination(Reply.FORWARD_NOT_FOUND);
				return reply;
			}
			//_dao.updateFrom(binder);
			<type> entityNew = binder.getEntity();
			_dao.update(entityNew); //copy over!!
			
			Logger.info("saved update ");
			reply.setDestination(Reply.FORWARD_INDEX);
			return reply;
		}
	}
	
	
	public <type>Reply onDeleteCommand(DeleteCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.FORWARD_INDEX);
		<type> entity = _dao.findById(cmd.id);
		if (entity == null)
		{
			reply.setDestination(Reply.FORWARD_NOT_FOUND);
			reply.setFlashFail("could not find entity");
		}
		else
		{
			_dao.delete(cmd.id);
		}
		return reply;
	}
	
	public <type>Reply onShowCommand(ShowCommand cmd)
	{
		<type>Reply reply = createReply();
		reply.setDestination(Reply.VIEW_SHOW);
		<type> entity = _dao.findById(cmd.id);
		if (entity == null)
		{
			reply.setDestination(Reply.FORWARD_NOT_FOUND);
			reply.setFlashFail("could not find entity");
		}
		else
		{
			reply._entity = entity;
		}
		return reply;
	}


>>

endclassdecl() ::= <<
}
>>

