header(package, presenter, reply, binder) ::= <<

package <package>;

import mef.core.MettleInitializer;
import mef.presenters.<presenter>;
import mef.presenters.replies.<reply>;
import mef.viewinputs.*;
import mef.entities.*;

import org.mef.framework.commands.Command;
import org.mef.framework.sfx.SfxContext;

import play.Logger;
import play.data.Form;
import play.mvc.Http.Request;
import boundaries.binders.<binder>;

>>

fielddecl(type, name, value) ::= <<
    public <name> <name><init(value)>;
>>
init(v) ::= "<if(v)> = <v><endif>"


classdecl(type, presenter, reply, binder, inputType) ::= <<

public class <type> extends Boundary
{
	
	public static <type> create(Request request) 
	{
		return new <type>(MettleInitializer.theCtx, request);
	}

	public <binder> binder;
	
	public <type>(SfxContext ctx, Request request)
	{
		super(ctx, request);
	}	
	
	public <reply> addFormAndProcess(int inputType, Command cmd)
	{
		binder = new <binder>(_ctx, inputType);
		cmd.setFormBinder(binder);
		return process(cmd);
	}	
	
	public Form\<<inputType>\> makeForm(<reply> reply)
	{
		Form\<<inputType>\> frm = null;
		if (binder != null)
		{
			Logger.info("reuxse frm");
			frm = binder.getForm();
		}
		else
		{
			Logger.info("NOT reuse frm");
			frm = Form.form(<inputType>.class);
		}
		return frm;
	}
		
	
	@Override
	public <reply> process(Command cmd)
	{
		begin(cmd);
		<presenter> presenter = new <presenter>(_ctx);
		<reply>  reply = (<reply> ) doProcess(presenter, cmd);

		return reply;
	}

>>

endclassdecl() ::= <<
}
>>

