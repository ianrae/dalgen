header(package, presenter, reply, boundary) ::= <<


package controllers;

import mef.presenters.replies.<reply>;
import org.mef.framework.replies.Reply;

import play.mvc.Result;
import boundaries.<boundary>;
import org.mef.framework.commands.IndexCommand;
import org.mef.framework.replies.Reply;

import play.data.Form;
import play.mvc.Controller;
import play.mvc.Result;

>>


classdecl(type, presenter, reply, boundary) ::= <<

public class <type> extends BaseController
{
	public static Result index() 
    {
		<boundary> boundary = <boundary>.create(request());
		<repy> reply = boundary.process(new IndexCommand());
		return renderOrForward(boundary, reply);
	}
	
    private static Result renderOrForward(<boundary> boundary, <reply> reply)
    {
		if (reply.failed())
		{
			return redirect(routes.ErrorController.logout());
		}
		
		switch(reply.getDestination())
		{
		case Reply.VIEW_INDEX:
			return ok(views.html.<type>.index.render(reply._allL));    	

		case Reply.FOWARD_NOT_AUTHENTICATED:
			return play.mvc.Results.redirect(routes.ErrorController.showError("Not logged in!"));	

		case Reply.FOWARD_NOT_AUTHORIZED:
			return play.mvc.Results.redirect(routes.ErrorController.showError("Not authorized to do that!"));	


		default:
			return play.mvc.Results.redirect(routes.ErrorController.logout());	
    	}
	}


>>

endclassdecl() ::= <<
}
>>
