header(package, type, extras, willBeOverwritten) ::= <<


package <package>;

import java.util.Map;

import mef.entities.*;
import mef.viewinputs.*;

import org.mef.framework.binder.BinderHelper;
import org.mef.twixt.binder.IFormBinder;
import org.mef.framework.sfx.SfxBaseObj;
import org.mef.framework.sfx.SfxContext;

import play.Logger;
import play.data.Form;


>>

fielddecl(type, name, value) ::= <<
    public <name> <name><init(value)>;
>>
init(v) ::= "<if(v)> = <v><endif>"


classdecl(type, name) ::= <<

public class <type>FormBinder extends SfxBaseObj implements IFormBinder\<<type>\>
{
	private Form\<<type>\> validationForm = Form.form(<type>.class);
	private Form\<<type>\> filledForm;
	private <type> object;
	private int inputType;
	
	public <type>FormBinder(SfxContext ctx, int inputType)
	{
		super(ctx);
		this.inputType = inputType;
	}
	
	@Override
	public boolean bind() 
	{
		//does Play validation (if any)
		this.filledForm = validationForm.bindFromRequest();

		if (! filledForm.hasErrors())
		{
			object = this.filledForm.get();

			//and do mef validation
			log(String.format("bind: inputType %d", inputType));
			BinderHelper.validateInput(object, filledForm, inputType);
		}
		
		if (filledForm.hasErrors())
		{
			Logger.info("binder:binding failed!");
		}
		return ! filledForm.hasErrors();
	}

	@Override
	public <type> get() 
	{
		return object;
	}
	
	@Override
	public Object getValidationErrors() 
	{
		return filledForm.errors();
	}
	
	@Override
	public Form\<<type>\> getForm() 
	{
		return filledForm;
	}
>>

endclassdecl() ::= <<

}
>>

