header(package, type) ::= <<
//THIS FILE HAS BEEN AUTO-GENERATED. DO NOT MODIFY.
package <package>;

import java.util.ArrayList;
import java.util.List;

import boundaries.Boundary;

import models.<type>Model;

import mef.dals.I<type>DAL;
import mef.entities.<type>;
import org.mef.framework.binder.IFormBinder;

>>



querydecl(type, fieldType, name) ::= <<
    @Override
    public <type> find_by_<name>(<fieldType> val) 
    {
        for(<type> entity : _L)
        {
            if (entity.<name> == val)
            {
                return entity;
            }
        }
        return null; //not found
    }
>>

methoddecl(meth) ::= <<
public <meth>
{
	return null;
}
>>


classdecl(name, type) ::= <<
public class <name> implements I<type>DAL
{
	@Override
	public void save(<type> entity) 
	{
		<type>Model t = (<type>Model)entity.cc; 
		if (t == null) //not yet known by db? (newly created)
		{
			System.out.println("save-auto-create");
			t = createModelFromEntity(entity); //create model, set entity, and call all setters
		}
		else //touch all (for ebean), except id
		{
			t.setName(entity.name);
		}
		t.save();
	}
	
	@Override
	public void updateFrom(IFormBinder binder) 
	{
		<type>Model model = (<type>Model) binder.getRawObject();
		model.update();
	}

	@Override
	public <type> findById(long id) 
	{
		<type>Model t = <type>Model.find.byId(id);
		if (t == null)
		{
			return null;
		}
		t.entity = createEntityFromModel(t); //create entity, set m.cc and t.entity, copy all fields from model to entity
		return t.entity;
	}

	@Override
	public List\<<type>\> all() 
	{
		List\<<type>Model> L = <type>Model.all();
		List\<<type>\> entityL = createEntityFromModel(L);
		return entityL;
	}

	@Override
	public int size() 
	{
		return <type>Model.all().size();
	}

	@Override
	public void delete(long id) 
	{
		<type>Model t = <type>Model.find.byId(id);
		t.delete();
	}

	//<type>
	//create model, set entity, and call all setters
	public static <type>Model createModelFromEntity(<type> entity)
	{
		if (entity == null)
		{
			return null;
		}
		<type>Model t = new <type>Model();
		entity.cc = t;
		t.entity = entity;
		t.setId(entity.id);
		t.setName(entity.name);
		//email later!!
		return t;
	}
	//create entity, set m.cc and t.entity, copy all fields from model to entity
	public static <type> createEntityFromModel(<type>Model t)
	{
		if (t == null)
		{
			return null;
		}
		if (t.entity != null && t.entity.cc != null)
		{
			return t.entity; //already exists
		}
		<type> entity = new <type>();
		entity.cc = t;
		t.entity = entity;
		entity.id = (t.getId() == null) ? 0 : t.getId();
		entity.name	= t.getName();
		//!email!!
		return entity;
	}
	public static List\<<type>\> createEntityFromModel(List\<<type>Model\> L)
	{
		if (L == null)
		{
			return null;
		}
		ArrayList\<<type>\> entityL = new ArrayList\<<type>\>();
		for(<type>Model t : L)
		{
			<type> entity = createEntityFromModel(t);
			entityL.add(entity);
		}
		return entityL;
	}
       
>>

endclassdecl() ::= <<
}
>>

sampleloop(items) ::= "<items:{it|<it.id>: <it.lastName>, <it.firstName>\n}>"